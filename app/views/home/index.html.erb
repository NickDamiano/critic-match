<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
    <title>Critic Matcher</title>
    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
      <script src="https://oss.maxcdn.com/html5shiv/3.7.3/html5shiv.min.js"></script>
      <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->
    <link href="https://fonts.googleapis.com/css?family=Baloo+Bhaijaan|Fredoka+One|Ultra" rel="stylesheet">
  </head>
  <body>
  	<div class="container">
  		<div class="row">
  			<a href="<%= root_path %>"  id="top_element" class="col-md-10 col-md-offset-1">Critic    Matcher</a>
  		</div>
  	</div>
	<div class="container">
		<div class="row">
			<div id="movies" class="col-md-10 col-md-offset-2">
			</div>
		</div>
		<!-- set a div for 3 -->
		<div class="row">
			<div id="top_match" >
			</div>
		</div>
	</div>
  </body>
</html>



<script type="text/javascript">

	// *********************************** Variables ************************************
	var all_movies;
	var active_movies;
	var critics_reviews;
	var reviews_active;
	var array_of_movie_ids =[];
	var match;

	// *********************************** Functions ************************************

	// *********************************** Get Session Variables section ************************************

	

	// sets variable which is iterated on each time a movie is reviewed
	function getMatch(){
		if(sessionStorage["match"] == undefined ){
			sessionStorage.setItem('match', JSON.stringify(0));			
		}
		match = JSON.parse(sessionStorage['match']);
	}

	// Sets an empty object in session storage if this is the first time they visit the site
	function getTopMatch(){
		if(sessionStorage["topMatch"] == undefined ){
			top_match = {percentage: 0, matches: 0};
			sessionStorage.setItem('topMatch', JSON.stringify(top_match));			
		}
		top_match = JSON.parse(sessionStorage['topMatch']);
		if(top_match["percentage"] > 0){
			updateTopMatch(top_match);
		}
	}

	// sets or pulls critic_reviews object
	function getCriticsReviews(){
		if(sessionStorage["criticsReviews"] == undefined ){
			critics_reviews = {};
			sessionStorage.setItem('criticsReviews', JSON.stringify(critics_reviews));			
		}
		critics_reviews = JSON.parse(sessionStorage['criticsReviews']);
	}

	// Sets an empty object in session storage if this is the first time they visit the site for user review records
	function getUserReviews(){
		if(sessionStorage["userReviews"] == undefined ){
			user_reviews = {};
			sessionStorage.setItem('userReviews', JSON.stringify(user_reviews));			
		}
		user_reviews = JSON.parse(sessionStorage['userReviews']);
	}

	// ******************************************************* Update Functions Section ****************************************

	// updates user review object after each rating is made
	function updateUserReviews(review){
		var rating = review[0];
		var movie = review[1];
		user_reviews[movie] = rating;
		sessionStorage.setItem('userReviews', JSON.stringify(user_reviews));
	}

	// run initially and when top critic match is identified in updateCriticResults. Updates HTML for top match
	function updateTopMatch(top_match){
		var top_match_html = document.querySelector("#top_match");
		percentage = top_match["percentage"];
		matches = top_match["matches"];
		critic_id = top_match["critic_id"];
		top_match_html.innerHTML = "Critic ID: " + critic_id + " - " + "percentage: " + percentage + " - " + 'matches: ' + matches;
	}

	//Updates critic object upon each click of a rating
	function updateCriticResults(movie_and_rating){
		//convert to 0-100 to match up with critic reviews
		var total_matches;
		var total_points;
		var percentage;
		var rating 	= (movie_and_rating[0] * 25) - 10;
		var movie_id 	= movie_and_rating[1];
		var reviews = reviews_active[movie_id];
		for(var i=0; i < reviews.length; i++){
			critic 				= reviews[i]["critic_id"];
			score 				= reviews[i]["score"];
			difference 			= Math.abs(rating - score);
			// if critic exists do this
			if(critic in critics_reviews){
				critics_reviews[critic]["matches"] += 1;
				critics_reviews[critic]["points"] += difference;
				total_matches 	= critics_reviews[critic]["matches"];
				total_points 	= critics_reviews[critic]["points"];
				critics_reviews[critic]["percentage"] = Math.round(100 - (total_points / total_matches));
				percentage = critics_reviews[critic]["percentage"]
			}else if(!(critic in critics_reviews)){
				critics_reviews[critic] = {
					"matches": 1,
					"points" : difference,
					"percentage": (100-difference)
				}
			}
			//if critic does not exist in database do this check against top match and replace top match if score is higher
			// TODO extract this to its own method where we have a top 3 array and each is compared. 
			if(percentage > top_match["percentage"] && total_matches > ( match / 2)){
				top_match = critics_reviews[critic];
				top_match["critic_id"] = critic;
				updateTopMatch(top_match);
				sessionStorage.setItem('topMatch', JSON.stringify(top_match));
			}
			if(top_match["critic_id"] == critic ){
				top_match = critics_reviews[critic]
				top_match["critic_id"] = critic;
				updateTopMatch(top_match)
				sessionStorage.setItem('topMatch', JSON.stringify(top_match));
			}
		}
		sessionStorage.setItem('criticsReviews', JSON.stringify(critics_reviews));
	}

	//Update DOM with active movies
	function updateDomWithMovies(){
		var movies_html_id = document.querySelector("#movies");
		active_movies.forEach((movie, i)=>{
			var movie_element = document.createElement('div');
			movie_element.className = 'movie';
			var movieTitle 	= document.createElement('div');
			movieTitle.className = 'movie_title';
			var image 	= document.createElement('img');
			var buttons = document.createElement('div');
			buttons.addClass = 'buttons';
			$(buttons).attr('id', movie.id);
			for(var i=1; i < 5; i++){
				var button = document.createElement('button');
				button.className = 'button_' + movie.id;
				button.addEventListener('click', function() { 
					var movie_and_rating = [];
					match++;
					this.className = 'clicked';
					this.disabled = true;
					sessionStorage.setItem('match', JSON.stringify(match));
					movie_and_rating.push(this.innerHTML);
					movie_and_rating.push(this.parentNode.id);
					// disable the buttons
					buttons_to_be_disabled = document.querySelectorAll(".button_" + movie.id);
					disableButtons(".button_" + movie.id);
					checkIfAllReviewed();
					updateCriticResults(movie_and_rating);
					updateUserReviews(movie_and_rating);
					// call function to update critic object
				})
				button.innerHTML = i;
				buttons.appendChild(button);
			}
			var havent_seen_button = document.createElement('button');
			havent_seen_button.className = 'button_' + movie.id;
			havent_seen_button.innerHTML = "Have not seen";
			havent_seen_button.addEventListener('click', function() { 
					//TODO pass [-1,movie_id] to updateUserReviews
					this.className = 'clicked';
					this.disabled = true;
					disableButtons('.button_' + movie.id);
					checkIfAllReviewed();
					updateUserReviews(['-1', this.parentNode.id]);
				})
			buttons.appendChild(havent_seen_button);
			image.src = movie.image_uri;
			image.style.height = '143px';
			image.style.width = '98px';
			movieTitle.innerHTML = movie.title;
			movie_element.appendChild(movieTitle);
			movie_element.appendChild(image);
			
			movie_element.appendChild(buttons);
			movies_html_id.appendChild(movie_element)
		})
	}


	// ******************************************* API Calls ******************************************

	//Gets all matching movies as a follow up to draw from for reviews
	function getAllMoviesApi()  {
		if(all_movies.length == 0){
			return $.ajax({
				dataType: 'json',
				url: '/api/movies',
				success: function(data) {
					all_movies = data;	
					sessionStorage.setItem('all_movies', JSON.stringify(all_movies));
					// delete the active movies from it			
				}						
			})	
		}
		
	}

	//Gets the reviews for the active movies being rated by the user
	function getActiveReviews() {
		var movie_ids = array_of_movie_ids
		return $.ajax({
			datatype: 'json',
			url: '/api/reviews/' + movie_ids,
			success: function(data) {
				reviews_active = data;
			}
		})
		return reviews_active;
	}

	//Gets initial 5 movies to load onto landing page
	function getFirstMovies()  {
		if( typeof all_movies == 'undefined'){
			all_movies_check = sessionStorage['all_movies']
			all_movies = (typeof all_movies_check == 'string' ) ? JSON.parse(all_movies_check) : [] ;	
		}
		if(all_movies.length > 0){
			active_movies = all_movies.splice(0,6);
			sessionStorage.setItem('all_movies', JSON.stringify(all_movies));
			return Promise.resolve(true);
		}else if (all_movies.length == 0){
			return $.ajax({
				dataType: 'json',
				url: '/api/movies/first-movies',
				success: function(data) {
					console.log('success', data);
					active_movies = data;				
				}						
			})
		}
	}

	// *********************************************** Helper Functions *******************************************

	// Sets the variable for array of movies in preparation for getting the reviews for active
	function setMovieIdArray(){
		array_of_movie_ids = []
		for(var count = 0; count < active_movies.length; count++){
			array_of_movie_ids.push(active_movies[count].id)
		}
		return array_of_movie_ids;
	}

	
	// Refreshes movies after all have been selected
	//////////////////////////////////////////////////////////////////
	function loadNextMovies(){
		getFirstMovies();
		var movie_element = document.getElementById('movies');
		while(movie_element.firstChild){
			movie_element.removeChild(movie_element.firstChild);
		}
		updateDomWithMovies();
		setMovieIdArray();
		getActiveReviews()
		.then(reorganizeReviews);

		// 	getFirstMovies()
		// .then(getTopMatch)
		// .then(getCriticsReviews)
		// .then(getUserReviews)
		// .then(updateDomWithMovies)
		// .then(setMovieIdArray)
		// .then(getActiveReviews)
		// .then(reorganizeReviews)
		// .then(getAllMoviesApi)
	}

	// Reorganizes reviews to be easily called by id number
	function reorganizeReviews(){
		var active_reviews = {};
		for(var i=0; i < reviews_active.length; i++){
			id = reviews_active[i][i].movie_id + ''
			active_reviews[id] = reviews_active[i]
		}
		reviews_active = active_reviews;
	}

	// Checks if all reviews have been clicked and calls load next movie if they have
	function checkIfAllReviewed(){
		var buttons = document.querySelectorAll('button');
		var buttons_flag = true
		for(var i = 0; i < buttons.length; i++){
			if(buttons[i].disabled == false){
				buttons_flag = false
				break;
			}
		}
		if( buttons_flag == true ){
			loadNextMovies();
		}
	}

	// Disables buttons - Called each time a review is made
	function disableButtons(button_class){
		buttons_array = document.querySelectorAll(button_class);
		for(var i = 0; i < buttons_array.length; i++){
			buttons_array[i].disabled = true;
		}
	}

	// ******************************************** Main **************************************************
	$( document ).ready(function() {
		// here get the width with a mediaquery and put that in a variable and then call number of movies for that width below
		getFirstMovies()
		.then(getTopMatch)
		.then(getCriticsReviews)
		.then(getUserReviews)
		.then(updateDomWithMovies)
		.then(setMovieIdArray)
		.then(getActiveReviews)
		.then(reorganizeReviews)
		.then(getMatch)
		.then(getAllMoviesApi)
	})
</script>
