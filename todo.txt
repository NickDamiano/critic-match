Order of tasks:

							Old version

updateTopMatch - 
	- gets html element, gets percentage, matches, and id, then sets innerhtml to result
getTopMatch - 
	- runs on page load to pull out existig top match into variable and call
	update top match. if not exist then it sets it as a single object
UpdateCriticResults
	- if percentage is higher and matches is higher call UpdateTopMatch
	- if the ids match with the top match, we just update top match with
	updateTopMatch
	- session store top match

	order: get top match on page load, then updatecriticresults on review button click, then update Top match html

	normal: they click the button, it evaluates top match and updatesTopMatch as needed

New Version
	top match is an array of objects
	when button is clicked, loop through array, 
		- if critic ids match, update the array element and break. 
		- else if percentage is higher and matches is = or higher, replace that element with current critic
		- Session store
		- call update Top match with new result as parameter
	Update Top match	
	 - sort the objects by percentage
	 - if top 3 result already, destroy parent node
	 - create a div with a class to contain the top 3 and append it 
	 - create 3 divs
	 - set each div to a critic in one line each
	 - append those divs to the parent object




Now
- refactor variables to check for session storage and if it exists, return it to the variable that called it and if it doesn't exist. set it 
- Get top 3 critics working either with an array or 3 separate variables
- prevent duplicates for all
- add styling for the number that is clicked
- add a thumbnail next to movie title. 
- Get styling for movie down
- Style top 3 critics section
- Styling for css movies
- Media queries to affect number of movies loaded and mobile view with easy buttons to press
- recent scrape and cron job scrape
- Javascript tests with 

Later
- After scraper is done, add field to reviews for author name by creating a rake task that gets each review in batches, gets the critic name, updates the record and saves the record. tricky part is the batches
- when reviews are done. delete all movie reviews that are older than 5 years and movies that are older than 5 years. 

Bugs
- figure out why in theater scraper fails at "rought night" saying 
NoMethodError: undefined method `search' for nil:NilClass
/Users/nickdamiano/code/critic-match/critic-match/app/jobs/metacritic_scraper.rb:94:in `scrape_one_movies_reviews'
- add exception for Mechanize::ResponseReadError: Content-Length (19428) does not match response body length (17099)

Ideas for later
See critics who are reviewing movies today that have been active up to 20 years, if it's significant, try it with them where you find a list of cult movies and mix those in with each page. also probably have to see first last name and maybe combine
- it would be cool if the app could detect which movies they were rating and which they weren't seeing and adjust the movies it asked them, like by genre without asking them. 
- After you get a critic you can rate movies just with him or just him and the top 3 are compared to refine it the most?

-front page part 4 (Tuesday/Wednesday/Thursday)
	- create restful critic page that shows all matched movies with closest matched at top and cool graphics
	- create a button to wipe out results and start over
	- have front end tests
	- Get domain all set up
	- post project in makersquare facebook and slack. 


-get scraper completely good (mostly good)
- every api call should handle too many requests

- build recent movies in theater scraper
- build rss scraper
-write tests for scraper


2. Create the Scraper
3. Scrape movie reviews
  - Get the movie name and save info for movie
  - Get critic review and save info for critic, and critic review
  - Hit next page 
  (alternatively might be able to do it by critic and get all reviews or by publication)
4. Create minimal front end with form and ajax that loads the next. maybe it just does one at a time anyway? 
5. Fill out front end with bootstrap and styling
6. Create Daily Scraper / Cronjob / rake task and set it to run

For serving movies - it should start with movies in the last 3 years with reviews over 40, randomized, once that's exhausted it should go to above 30, above 20, etc and how does it keep track of the ones they've already reviewed? For first timers it has to load up a thing for movies, maybe 200 list

Models

- create user model with
	- email
	- password
	(this is a stretch goal)

- create temp user model
	- id
	- puts encyrpted thing in browser?

- create a movie model
	- title
	- release_date
	- genre
	- Metacritic score
	- Rotten tomatoes score
- Create a critic model
	- first name
	- last name
	- publications [ array ]
	- link to their movie reviews?
	- active boolean. have they posted a review in the last two months?
- UserReview
	- user_id
	- movie_id
	- score (1-5) integer
- CriticReview
	- critic_id
	- movie_id 
	- score (1-5) type integer
	- Higher than metacritic - boolean
	- lower than metacritic - boolean
	- difference from metacritic - integer +30 or -50

Controllers
- Rating
	- new
		creates a new userReview record - hit with ajax
	- 

Integration
- Landing page has the banner, the selection for genre, and when the button is clicked, shows the next partial which has at least one film with the appropriate
5 buttons, haven't seen button, thumbnail, title

Possible algorithms for matching
- scores possible 1,2,3,4 hated it, meh, liked it, loved it and a box to type in a score 0-100 for people who want the most accurate result. It's one row of movies and the number of movies is based on the width of the screen where one or two movies for a phone. 
- It might be easier to pull all critics out into a hash with points set to zero so i dont have to logically add them in as it goes and matches
- the hash has number of reviews and then we calculate average difference not total. 
- { movie_id: 1, critics: [{critic_id: 1, number_of_reviews: 8, point_difference: 83}], {critic_id: 2 }] }

Initial Scraper
- Go to movies page http://www.metacritic.com/browse/movies/title/dvd
- Open a movie title
- Click critic reviews
- loop through all movie reviews capturing score, critic, and publication. When you finish callback to do the next movie
- When that page is full, if there are more pages in pagination, go to the next and loop through it all
- Then go back through on http://www.metacritic.com/browse/movies/title/theater for all theater results

Daily Scraper ( Rake Task / Chron-job )
- Go to http://www.metacritic.com/browse/movies/release-date/theaters/date and check the first 30 films. 
- For each film, look to see if the critic review count has changed and if it has, find the newest reviews that match and save them
- For each new film, scrape all reviews

Additional thoughts
- The movies asked about should continue to be from the last 2-3 years and be automated to update. movies that are rarely reviewed or marked as not seen less than 25% of the time should maybe be removed from being questioned if they are older than a certain date?
- It should be movies from last 4 years at the oldest probably, and also it should look for only active critics. 



# TODO for Sunday -
#scrapers
#  create rake tasks to scrape all, scrape letter range
#  create method/class that can scrape http://www.metacritic.com/browse/movies/release-date/theaters/date
#  create daily cron job to look for new movies in rss feed (XML) maybe using just a api request thing
#  write tests for scrapers and use vcr gem
#modify models for columns for review_uri and critic_uri etc also add image thumbnails
#scrape the reviews (make sure no additions needed for models
#  setup api for ajax return for queries on movie
#start frontend
# create title thing, initially log results in console
# build css for movie element and have the page display approipriate number based on width
# after you click on each element for the review have it reload with the appropriate number (checking
	#media query again each time in case of resize or phone turn)
# set up local storage logging for user reviews
# when user clicks, ajax fires, gets all reviews as api, then javascript loops through each review, 
# calculates point difference for that critic, updates local storage by critic id with point differential
# and increments number of matched review and adds a percentage match field
# log the top 3 with name, percentage, and count of reviews (skews towards an inactive critic who you match with a lot)
# maybe we need a minimum match
# do CSS styling for matching bars
#stretch goals!
# create critic page where it shows which movies, your score, their score, differential (but i need to store that)
# create authentication
