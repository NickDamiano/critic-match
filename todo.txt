Order of tasks:
1. X Create the models 
2. Create the Scraper
3. Scrape movie reviews
  - Get the movie name and save info for movie
  - Get critic review and save info for critic, and critic review
  - Hit next page 
  (alternatively might be able to do it by critic and get all reviews or by publication)
4. Create minimal front end with form and ajax that loads the next. maybe it just does one at a time anyway? 
5. Fill out front end with bootstrap and styling
6. Create Daily Scraper / Cronjob / rake task and set it to run


Models

- create user model with
	- email
	- password
	(this is a stretch goal)

- create temp user model
	- id
	- puts encyrpted thing in browser?

- create a movie model
	- title
	- release_date
	- genre
	- Metacritic score
	- Rotten tomatoes score
- Create a critic model
	- first name
	- last name
	- publications [ array ]
	- link to their movie reviews?
	- active boolean. have they posted a review in the last two months?
- UserReview
	- user_id
	- movie_id
	- score (1-5) integer
- CriticReview
	- critic_id
	- movie_id 
	- score (1-5) type integer
	- Higher than metacritic - boolean
	- lower than metacritic - boolean
	- difference from metacritic - integer +30 or -50

Controllers
- Rating
	- new
		creates a new userReview record - hit with ajax
	- 

Integration
- Landing page has the banner, the selection for genre, and when the button is clicked, shows the next partial which has at least one film with the appropriate
5 buttons, haven't seen button, thumbnail, title

Possible algorithms for matching
- scores possible 1,2,3,4 hated it, meh, liked it, loved it and a box to type in a score 0-100 for people who want the most accurate result. It's one row of movies and the number of movies is based on the width of the screen where one or two movies for a phone. 
- It might be easier to pull all critics out into a hash with points set to zero so i dont have to logically add them in as it goes and matches
- the hash has number of reviews and then we calculate average difference not total. 
- { movie_id: 1, critics: [{critic_id: 1, number_of_reviews: 8, point_difference: 83}], {critic_id: 2 }] }

Initial Scraper
- Go to movies page http://www.metacritic.com/browse/movies/title/dvd
- Open a movie title
- Click critic reviews
- loop through all movie reviews capturing score, critic, and publication. When you finish callback to do the next movie
- When that page is full, if there are more pages in pagination, go to the next and loop through it all
- Then go back through on http://www.metacritic.com/browse/movies/title/theater for all theater results

Daily Scraper ( Rake Task / Chron-job )
- Go to http://www.metacritic.com/browse/movies/release-date/theaters/date and check the first 30 films. 
- For each film, look to see if the critic review count has changed and if it has, find the newest reviews that match and save them
- For each new film, scrape all reviews

Additional thoughts
- The movies asked about should continue to be from the last 2-3 years and be automated to update. movies that are rarely reviewed or marked as not seen less than 25% of the time should maybe be removed from being questioned if they are older than a certain date?
- It should be movies from last 4 years at the oldest probably, and also it should look for only active critics. 

